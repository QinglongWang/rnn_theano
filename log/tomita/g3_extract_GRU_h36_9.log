G:g3, model:GRU tanh, load all data and stored hidden activations


--------------------------------------------------------------------
Begin DFA extraction with n_state:2
Done fitting takes time: 0.2839
==Minimized===

This DFA has 1 states
States: ['2']
Alphabet: set(['1', '0'])
Starting state: 2
Accepting states: []
Transition function:
	2
1 	2
0 	2
Current state: 2
Currently accepting: False

Precision: 0.0000 Recall: 0.0000 Accuracy: 0.5422 F1: 0.0000


--------------------------------------------------------------------
Begin DFA extraction with n_state:3
Done fitting takes time: 0.1838
==Minimized===

This DFA has 1 states
States: ['2']
Alphabet: set(['1', '0'])
Starting state: 2
Accepting states: []
Transition function:
	2
1 	2
0 	2
Current state: 2
Currently accepting: False

Precision: 0.0000 Recall: 0.0000 Accuracy: 0.5422 F1: 0.0000


--------------------------------------------------------------------
Begin DFA extraction with n_state:4
Done fitting takes time: 0.2010
==Minimized===

This DFA has 1 states
States: ['2']
Alphabet: set(['1', '0'])
Starting state: 2
Accepting states: ['2']
Transition function:
	2
1 	2
0 	2
Current state: 2
Currently accepting: True

Precision: 0.4578 Recall: 1.0000 Accuracy: 0.4578 F1: 0.6280


--------------------------------------------------------------------
Begin DFA extraction with n_state:5
Done fitting takes time: 0.4479
==Minimized===

This DFA has 2 states
States: ['2', '5']
Alphabet: set(['1', '0'])
Starting state: 2
Accepting states: ['2']
Transition function:
	2	5
1 	5	5
0 	2	5
Current state: 2
Currently accepting: True

Precision: 1.0000 Recall: 0.0061 Accuracy: 0.5450 F1: 0.0120


--------------------------------------------------------------------
Begin DFA extraction with n_state:6
Done fitting takes time: 0.4705
==Minimized===

This DFA has 4 states
States: ['2', '4', '1', '5']
Alphabet: set(['1', '0'])
Starting state: 2
Accepting states: ['2', '4']
Transition function:
	1	2	4	5
1 	1	4	4	1
0 	1	2	5	4
Current state: 2
Currently accepting: True

Precision: 1.0000 Recall: 0.4801 Accuracy: 0.7620 F1: 0.6487


--------------------------------------------------------------------
Begin DFA extraction with n_state:7
Done fitting takes time: 0.6161
==Minimized===

This DFA has 4 states
States: ['2', '4', '1', '5']
Alphabet: set(['1', '0'])
Starting state: 2
Accepting states: ['2', '4']
Transition function:
	1	2	4	5
1 	1	4	2	1
0 	1	2	5	2
Current state: 2
Currently accepting: True

Precision: 0.8304 Recall: 1.0000 Accuracy: 0.9065 F1: 0.9073


--------------------------------------------------------------------
Begin DFA extraction with n_state:8
Done fitting takes time: 0.3655
==Minimized===

This DFA has 4 states
States: ['8', '4', '1', '7']
Alphabet: set(['1', '0'])
Starting state: 8
Accepting states: ['8', '4']
Transition function:
	1	4	7	8
1 	1	8	1	4
0 	1	7	8	8
Current state: 8
Currently accepting: True

Precision: 0.8304 Recall: 1.0000 Accuracy: 0.9065 F1: 0.9073


--------------------------------------------------------------------
Begin DFA extraction with n_state:9
Done fitting takes time: 0.6319
==Minimized===

This DFA has 4 states
States: ['9', '3', '1', '5']
Alphabet: set(['1', '0'])
Starting state: 9
Accepting states: ['9', '3']
Transition function:
	1	3	5	9
1 	1	9	1	3
0 	1	5	9	9
Current state: 9
Currently accepting: True

Precision: 0.8304 Recall: 1.0000 Accuracy: 0.9065 F1: 0.9073


--------------------------------------------------------------------
Begin DFA extraction with n_state:10
Done fitting takes time: 0.4174
==Minimized===

This DFA has 5 states
States: ['2', '4', '8', '1', '7']
Alphabet: set(['1', '0'])
Starting state: 2
Accepting states: ['2', '4', '8']
Transition function:
	1	2	4	7	8
1 	1	4	2	1	4
0 	1	2	7	8	7
Current state: 2
Currently accepting: True

Precision: 0.9447 Recall: 1.0000 Accuracy: 0.9732 F1: 0.9716


--------------------------------------------------------------------
Begin DFA extraction with n_state:11
Done fitting takes time: 0.6557
==Minimized===

This DFA has 6 states
States: ['10', '3', '8', '2', '11', '1']
Alphabet: set(['1', '0'])
Starting state: 2
Accepting states: ['10', '3', '8']
Transition function:
	1	10	11	2	3	8
1 	1	3	1	3	10	3
0 	1	10	8	10	11	11
Current state: 2
Currently accepting: False

Precision: 0.9447 Recall: 1.0000 Accuracy: 0.9732 F1: 0.9716


--------------------------------------------------------------------
Begin DFA extraction with n_state:12
Done fitting takes time: 0.2315
==Minimized===

This DFA has 4 states
States: ['10', '4', '11', '1']
Alphabet: set(['1', '0'])
Starting state: 10
Accepting states: ['10', '4']
Transition function:
	1	10	11	4
1 	1	4	1	10
0 	1	10	10	11
Current state: 10
Currently accepting: True

Precision: 0.8304 Recall: 1.0000 Accuracy: 0.9065 F1: 0.9073


--------------------------------------------------------------------
Begin DFA extraction with n_state:13
Done fitting takes time: 0.6380
==Minimized===

This DFA has 9 states
States: ['12', '8', '5', '11', '1', '3', '4', '10', '2']
Alphabet: set(['1', '0'])
Starting state: 2
Accepting states: ['10', '12', '3', '2', '4']
Transition function:
	1	10	11	12	2	3	4	5	8
1 	1	4	1	12	3	10	10	8	4
0 	1	10	12	11	10	5	11	8	11
Current state: 2
Currently accepting: True

Precision: 0.9547 Recall: 0.9995 Accuracy: 0.9781 F1: 0.9766


--------------------------------------------------------------------
Begin DFA extraction with n_state:14
Done fitting takes time: 0.8275
==Minimized===

This DFA has 6 states
States: ['10', '12', '3', '14', '11', '1']
Alphabet: set(['1', '0'])
Starting state: 14
Accepting states: ['10', '12', '3']
Transition function:
	1	10	11	12	14	3
1 	1	3	1	3	3	10
0 	1	10	12	11	10	11
Current state: 14
Currently accepting: False

Precision: 0.9447 Recall: 1.0000 Accuracy: 0.9732 F1: 0.9716


--------------------------------------------------------------------
Begin DFA extraction with n_state:15
Done fitting takes time: 0.7956
==Minimized===

This DFA has 6 states
States: ['10', '12', '3', '14', '11', '1']
Alphabet: set(['1', '0'])
Starting state: 14
Accepting states: ['10', '12', '3']
Transition function:
	1	10	11	12	14	3
1 	1	3	1	12	3	10
0 	1	10	12	11	10	11
Current state: 14
Currently accepting: False

Precision: 1.0000 Recall: 1.0000 Accuracy: 1.0000 F1: 1.0000


--------------------------------------------------------------------
Begin DFA extraction with n_state:16
Done fitting takes time: 0.7500
==Minimized===

This DFA has 6 states
States: ['10', '12', '3', '14', '11', '1']
Alphabet: set(['1', '0'])
Starting state: 14
Accepting states: ['10', '12', '3']
Transition function:
	1	10	11	12	14	3
1 	1	3	1	12	3	10
0 	1	10	12	11	10	11
Current state: 14
Currently accepting: False

Precision: 1.0000 Recall: 1.0000 Accuracy: 1.0000 F1: 1.0000


--------------------------------------------------------------------
Begin DFA extraction with n_state:17
Done fitting takes time: 0.3688
==Minimized===

This DFA has 6 states
States: ['10', '12', '3', '14', '11', '1']
Alphabet: set(['1', '0'])
Starting state: 14
Accepting states: ['10', '12', '3']
Transition function:
	1	10	11	12	14	3
1 	1	3	1	12	3	10
0 	1	10	12	11	10	11
Current state: 14
Currently accepting: False

Precision: 1.0000 Recall: 1.0000 Accuracy: 1.0000 F1: 1.0000


--------------------------------------------------------------------
Begin DFA extraction with n_state:18
Done fitting takes time: 0.7533
==Minimized===

This DFA has 6 states
States: ['10', '12', '18', '14', '11', '1']
Alphabet: set(['1', '0'])
Starting state: 14
Accepting states: ['10', '12', '18']
Transition function:
	1	10	11	12	14	18
1 	1	18	1	12	18	10
0 	1	10	12	11	10	11
Current state: 14
Currently accepting: False

Precision: 1.0000 Recall: 1.0000 Accuracy: 1.0000 F1: 1.0000


--------------------------------------------------------------------
Begin DFA extraction with n_state:19
Done fitting takes time: 0.5164
==Minimized===

This DFA has 6 states
States: ['10', '12', '18', '14', '11', '19']
Alphabet: set(['1', '0'])
Starting state: 14
Accepting states: ['10', '12', '18']
Transition function:
	10	11	12	14	18	19
1 	18	19	12	18	10	19
0 	10	12	11	10	11	19
Current state: 14
Currently accepting: False

Precision: 1.0000 Recall: 1.0000 Accuracy: 1.0000 F1: 1.0000
[ 0.          0.          0.6280285   0.01203008  0.64872232  0.90734386
  0.90734386  0.90734386  0.97158256  0.97158256  0.90734386  0.97659522
  0.97158256  1.          1.          1.          1.          1.        ]


[[ 0.43137255  0.          0.6280285   0.61434263  0.50299401  0.63171226
   0.38716017  0.6280285   0.38716017  0.38716017  0.38716017  0.38716017
   0.85017422  0.85017422  0.85017422  0.86228872  0.86228872  0.97396857]
 [ 0.          0.          0.58114962  0.          0.          0.43137255
   0.43137255  0.09647979  0.          0.          0.37054774  0.          0.
   0.          0.017866    0.18219634  0.22382946  0.43042071]
 [ 0.          0.63898421  0.63898421  0.0110331   0.45920746  0.85577649
   0.85577649  1.          1.          1.          1.          1.          1.
   1.          1.          1.          1.          1.        ]
 [ 0.          0.43092666  0.43092666  0.30802048  1.          1.          1.
   1.          1.          1.          1.          1.          1.          1.
   1.          1.          1.          1.        ]
 [ 0.6280285   0.6280285   0.45920746  0.94767025  0.94767025  0.94767025
   0.94767025  0.94767025  0.94767025  1.          1.          1.          1.
   1.          1.          1.          1.          1.        ]
 [ 0.          0.          0.94767025  0.94767025  1.          1.          1.
   1.          1.          1.          1.          1.          1.          1.
   1.          1.          1.          1.        ]
 [ 0.6280285   0.          0.43137255  0.61633466  0.61633466  0.61633466
   0.61633466  0.94767025  0.88685152  0.88685152  0.88685152  0.88685152
   1.          1.          1.          1.          1.          1.        ]
 [ 0.          0.          0.6280285   0.6280285   0.43359818  0.          0.
   0.77228174  0.8554337   0.8554337   0.8554337   0.8554337   0.85479042
   0.85479042  0.85479042  0.77648364  0.8554337   0.8554337 ]
 [ 0.          0.          0.6280285   0.01203008  0.64872232  0.90734386
   0.90734386  0.90734386  0.97158256  0.97158256  0.90734386  0.97659522
   0.97158256  1.          1.          1.          1.          1.        ]]
