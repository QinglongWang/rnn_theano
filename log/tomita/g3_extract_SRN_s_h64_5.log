G:g3, model:SRN sigmoid, load all data and stored hidden activations


--------------------------------------------------------------------
Begin DFA extraction with n_state:2
Done fitting takes time: 0.3878
==Minimized===

This DFA has 1 states
States: ['2']
Alphabet: set(['1', '0'])
Starting state: 2
Accepting states: []
Transition function:
	2
1 	2
0 	2
Current state: 2
Currently accepting: False

Precision: 0.0000 Recall: 0.0000 Accuracy: 0.5422 F1: 0.0000


--------------------------------------------------------------------
Begin DFA extraction with n_state:3
Done fitting takes time: 0.5649
==Minimized===

This DFA has 1 states
States: ['2']
Alphabet: set(['1', '0'])
Starting state: 2
Accepting states: []
Transition function:
	2
1 	2
0 	2
Current state: 2
Currently accepting: False

Precision: 0.0000 Recall: 0.0000 Accuracy: 0.5422 F1: 0.0000


--------------------------------------------------------------------
Begin DFA extraction with n_state:4
Done fitting takes time: 0.5240
==Minimized===

This DFA has 1 states
States: ['2']
Alphabet: set(['1', '0'])
Starting state: 2
Accepting states: ['2']
Transition function:
	2
1 	2
0 	2
Current state: 2
Currently accepting: True

Precision: 0.4578 Recall: 1.0000 Accuracy: 0.4578 F1: 0.6280


--------------------------------------------------------------------
Begin DFA extraction with n_state:5
Done fitting takes time: 0.5474
==Minimized===

This DFA has 2 states
States: ['5', '4']
Alphabet: set(['1', '0'])
Starting state: 5
Accepting states: ['5']
Transition function:
	4	5
1 	5	4
0 	4	4
Current state: 5
Currently accepting: True

Precision: 0.4941 Recall: 0.3828 Accuracy: 0.5381 F1: 0.4314


--------------------------------------------------------------------
Begin DFA extraction with n_state:6
Done fitting takes time: 0.4065
==Minimized===

This DFA has 2 states
States: ['5', '4']
Alphabet: set(['1', '0'])
Starting state: 5
Accepting states: ['5']
Transition function:
	4	5
1 	5	4
0 	4	4
Current state: 5
Currently accepting: True

Precision: 0.4941 Recall: 0.3828 Accuracy: 0.5381 F1: 0.4314


--------------------------------------------------------------------
Begin DFA extraction with n_state:7
Done fitting takes time: 0.6715
==Minimized===

This DFA has 1 states
States: ['5']
Alphabet: set(['1', '0'])
Starting state: 5
Accepting states: ['5']
Transition function:
	5
1 	5
0 	5
Current state: 5
Currently accepting: True

Precision: 0.4578 Recall: 1.0000 Accuracy: 0.4578 F1: 0.6280


--------------------------------------------------------------------
Begin DFA extraction with n_state:8
Done fitting takes time: 0.2238
==Minimized===

This DFA has 1 states
States: ['5']
Alphabet: set(['1', '0'])
Starting state: 5
Accepting states: ['5']
Transition function:
	5
1 	5
0 	5
Current state: 5
Currently accepting: True

Precision: 0.4578 Recall: 1.0000 Accuracy: 0.4578 F1: 0.6280


--------------------------------------------------------------------
Begin DFA extraction with n_state:9
Done fitting takes time: 0.2238
==Minimized===

This DFA has 7 states
States: ['5', '4', '9', '2', '7', '1', '8']
Alphabet: set(['1', '0'])
Starting state: 9
Accepting states: ['9', '2', '5', '4', '7']
Transition function:
	1	2	4	5	7	8	9
1 	1	7	5	7	9	1	7
0 	1	4	4	8	4	5	2
Current state: 9
Currently accepting: True

Precision: 0.6720 Recall: 1.0000 Accuracy: 0.7765 F1: 0.8038


--------------------------------------------------------------------
Begin DFA extraction with n_state:10
Done fitting takes time: 0.2186
==Minimized===

This DFA has 3 states
States: ['10', '2', '9']
Alphabet: set(['1', '0'])
Starting state: 9
Accepting states: ['10']
Transition function:
	10	2	9
1 	10	10	2
0 	10	10	2
Current state: 9
Currently accepting: False

Precision: 0.4575 Recall: 0.9990 Accuracy: 0.4573 F1: 0.6276


--------------------------------------------------------------------
Begin DFA extraction with n_state:11
Done fitting takes time: 0.4771
==Minimized===

This DFA has 10 states
States: ['3', '4', '11', '10', '5', '2', '9', '1', '6', '8']
Alphabet: set(['1', '0'])
Starting state: 9
Accepting states: ['10', '3', '5', '4']
Transition function:
	1	10	11	2	3	4	5	6	8	9
1 	6	4	10	4	6	10	4	1	1	2
0 	6	11	5	4	6	4	8	3	5	2
Current state: 9
Currently accepting: False

Precision: 0.5561 Recall: 0.9592 Accuracy: 0.6309 F1: 0.7041


--------------------------------------------------------------------
Begin DFA extraction with n_state:12
Done fitting takes time: 0.2561
==Minimized===

This DFA has 9 states
States: ['3', '12', '10', '5', '11', '9', '1', '6', '8']
Alphabet: set(['1', '0'])
Starting state: 9
Accepting states: ['10', '12', '3', '5']
Transition function:
	1	10	11	12	3	5	6	8	9
1 	6	12	10	10	6	5	1	1	10
0 	6	11	5	12	6	8	3	5	12
Current state: 9
Currently accepting: False

Precision: 0.6654 Recall: 1.0000 Accuracy: 0.7699 F1: 0.7991


--------------------------------------------------------------------
Begin DFA extraction with n_state:13
Done fitting takes time: 0.3083
==Minimized===

This DFA has 9 states
States: ['3', '12', '10', '5', '11', '9', '13', '1', '8']
Alphabet: set(['1', '0'])
Starting state: 9
Accepting states: ['10', '12', '3', '5']
Transition function:
	1	10	11	12	13	3	5	8	9
1 	13	12	10	10	1	13	5	1	10
0 	13	11	5	12	3	13	8	5	12
Current state: 9
Currently accepting: False

Precision: 0.6654 Recall: 1.0000 Accuracy: 0.7699 F1: 0.7991


--------------------------------------------------------------------
Begin DFA extraction with n_state:14
Done fitting takes time: 0.6769
==Minimized===

This DFA has 9 states
States: ['3', '12', '10', '5', '11', '9', '13', '1', '8']
Alphabet: set(['1', '0'])
Starting state: 9
Accepting states: ['10', '12', '3', '5']
Transition function:
	1	10	11	12	13	3	5	8	9
1 	13	12	10	10	1	13	5	1	10
0 	13	11	5	12	3	13	8	5	12
Current state: 9
Currently accepting: False

Precision: 0.6654 Recall: 1.0000 Accuracy: 0.7699 F1: 0.7991


--------------------------------------------------------------------
Begin DFA extraction with n_state:15
Done fitting takes time: 0.4112
==Minimized===

This DFA has 9 states
States: ['3', '12', '10', '15', '11', '9', '13', '1', '8']
Alphabet: set(['1', '0'])
Starting state: 9
Accepting states: ['10', '12', '15', '3']
Transition function:
	1	10	11	12	13	15	3	8	9
1 	13	12	10	10	1	15	13	1	10
0 	13	11	15	12	3	8	13	15	12
Current state: 9
Currently accepting: False

Precision: 0.6654 Recall: 1.0000 Accuracy: 0.7699 F1: 0.7991


--------------------------------------------------------------------
Begin DFA extraction with n_state:16
Done fitting takes time: 0.5310
==Minimized===

This DFA has 9 states
States: ['3', '12', '10', '15', '11', '9', '13', '1', '8']
Alphabet: set(['1', '0'])
Starting state: 9
Accepting states: ['10', '12', '15', '3']
Transition function:
	1	10	11	12	13	15	3	8	9
1 	13	12	10	10	1	15	13	1	10
0 	13	11	15	12	3	8	13	15	12
Current state: 9
Currently accepting: False

Precision: 0.6654 Recall: 1.0000 Accuracy: 0.7699 F1: 0.7991


--------------------------------------------------------------------
Begin DFA extraction with n_state:17
Done fitting takes time: 0.5264
==Minimized===

This DFA has 9 states
States: ['3', '12', '10', '15', '11', '9', '13', '1', '8']
Alphabet: set(['1', '0'])
Starting state: 9
Accepting states: ['10', '12', '15', '3']
Transition function:
	1	10	11	12	13	15	3	8	9
1 	13	12	10	10	1	15	13	1	10
0 	13	11	15	12	3	8	13	15	12
Current state: 9
Currently accepting: False

Precision: 0.6654 Recall: 1.0000 Accuracy: 0.7699 F1: 0.7991


--------------------------------------------------------------------
Begin DFA extraction with n_state:18
Done fitting takes time: 0.2316
==Minimized===

This DFA has 11 states
States: ['18', '12', '10', '15', '11', '9', '13', '3', '1', '6', '8']
Alphabet: set(['1', '0'])
Starting state: 9
Accepting states: ['10', '12', '15', '18']
Transition function:
	1	10	11	12	13	15	18	3	6	8	9
1 	6	12	10	10	1	15	13	13	1	1	10
0 	6	11	15	12	18	8	6	6	3	15	12
Current state: 9
Currently accepting: False

Precision: 0.7156 Recall: 1.0000 Accuracy: 0.8181 F1: 0.8342


--------------------------------------------------------------------
Begin DFA extraction with n_state:19
Done fitting takes time: 0.2546
==Minimized===

This DFA has 11 states
States: ['18', '12', '10', '15', '11', '9', '13', '3', '1', '6', '8']
Alphabet: set(['1', '0'])
Starting state: 9
Accepting states: ['10', '12', '15', '18']
Transition function:
	1	10	11	12	13	15	18	3	6	8	9
1 	6	12	10	10	1	15	13	13	1	1	10
0 	6	11	15	12	18	8	6	6	3	15	12
Current state: 9
Currently accepting: False

Precision: 0.7156 Recall: 1.0000 Accuracy: 0.8181 F1: 0.8342
[ 0.          0.          0.6280285   0.43137255  0.43137255  0.6280285
  0.6280285   0.8038103   0.62759385  0.7040533   0.79911344  0.79911344
  0.79911344  0.79911344  0.79911344  0.79911344  0.83424485  0.83424485]


[[ 0.          0.          0.6280285   0.43137255  0.43137255  0.6280285
   0.6280285   0.8038103   0.62759385  0.7040533   0.79911344  0.79911344
   0.79911344  0.79911344  0.79911344  0.79911344  0.83424485  0.83424485]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]]
