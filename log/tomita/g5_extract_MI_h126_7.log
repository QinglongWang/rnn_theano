G:g5, model:MI tanh, load all data and stored hidden activations


--------------------------------------------------------------------
Begin DFA extraction with n_state:2
Done fitting takes time: 0.6047
==Minimized===

This DFA has 1 states
States: ['1']
Alphabet: set(['1', '0'])
Starting state: 1
Accepting states: []
Transition function:
	1
1 	1
0 	1
Current state: 1
Currently accepting: False

Precision: 0.0000 Recall: 0.0000 Accuracy: 0.5097 F1: 0.0000


--------------------------------------------------------------------
Begin DFA extraction with n_state:3
Done fitting takes time: 0.5935
==Minimized===

This DFA has 3 states
States: ['2', '1', '3']
Alphabet: set(['1', '0'])
Starting state: 3
Accepting states: ['1', '3']
Transition function:
	1	2	3
1 	2	3	1
0 	2	2	2
Current state: 3
Currently accepting: True

Precision: 0.4871 Recall: 0.4269 Accuracy: 0.4986 F1: 0.4550


--------------------------------------------------------------------
Begin DFA extraction with n_state:4
Done fitting takes time: 0.9775
==Minimized===

This DFA has 1 states
States: ['3']
Alphabet: set(['1', '0'])
Starting state: 3
Accepting states: []
Transition function:
	3
1 	3
0 	3
Current state: 3
Currently accepting: False

Precision: 0.0000 Recall: 0.0000 Accuracy: 0.5097 F1: 0.0000


--------------------------------------------------------------------
Begin DFA extraction with n_state:5
Done fitting takes time: 1.1113
==Minimized===

This DFA has 3 states
States: ['4', '2', '5']
Alphabet: set(['1', '0'])
Starting state: 4
Accepting states: ['4']
Transition function:
	2	4	5
1 	5	5	4
0 	5	5	2
Current state: 4
Currently accepting: True

Precision: 0.4971 Recall: 0.4944 Accuracy: 0.5068 F1: 0.4957


--------------------------------------------------------------------
Begin DFA extraction with n_state:6
Done fitting takes time: 0.6306
==Minimized===

This DFA has 2 states
States: ['2', '1']
Alphabet: set(['1', '0'])
Starting state: 2
Accepting states: ['2']
Transition function:
	1	2
1 	2	1
0 	2	1
Current state: 2
Currently accepting: True

Precision: 0.5040 Recall: 1.0000 Accuracy: 0.5174 F1: 0.6702


--------------------------------------------------------------------
Begin DFA extraction with n_state:7
Done fitting takes time: 1.8287
==Minimized===

This DFA has 2 states
States: ['3', '1']
Alphabet: set(['1', '0'])
Starting state: 3
Accepting states: ['3']
Transition function:
	1	3
1 	3	1
0 	3	1
Current state: 3
Currently accepting: True

Precision: 0.5040 Recall: 1.0000 Accuracy: 0.5174 F1: 0.6702


--------------------------------------------------------------------
Begin DFA extraction with n_state:8
Done fitting takes time: 1.6535
==Minimized===

This DFA has 6 states
States: ['5', '6', '1', '7', '3', '4']
Alphabet: set(['1', '0'])
Starting state: 4
Accepting states: ['3', '5', '4', '6']
Transition function:
	1	3	4	5	6	7
1 	6	7	1	6	7	3
0 	6	7	1	3	5	3
Current state: 4
Currently accepting: True

Precision: 0.5037 Recall: 1.0000 Accuracy: 0.5168 F1: 0.6699


--------------------------------------------------------------------
Begin DFA extraction with n_state:9
Done fitting takes time: 0.6559
==Minimized===

This DFA has 3 states
States: ['1', '3', '4']
Alphabet: set(['1', '0'])
Starting state: 4
Accepting states: ['3', '4']
Transition function:
	1	3	4
1 	3	3	1
0 	1	3	1
Current state: 4
Currently accepting: True

Precision: 0.4905 Recall: 0.9986 Accuracy: 0.4907 F1: 0.6579


--------------------------------------------------------------------
Begin DFA extraction with n_state:10
Done fitting takes time: 1.9811
==Minimized===

This DFA has 8 states
States: ['10', '3', '2', '1', '7', '8', '5', '4']
Alphabet: set(['1', '0'])
Starting state: 10
Accepting states: ['10', '3', '2', '5', '4', '8']
Transition function:
	1	10	2	3	4	5	7	8
1 	3	1	7	7	3	3	3	4
0 	8	10	7	5	8	2	2	5
Current state: 10
Currently accepting: True

Precision: 0.4977 Recall: 0.7666 Accuracy: 0.5062 F1: 0.6036


--------------------------------------------------------------------
Begin DFA extraction with n_state:11
Done fitting takes time: 2.0173
==Minimized===

This DFA has 3 states
States: ['1', '11', '10']
Alphabet: set(['1', '0'])
Starting state: 10
Accepting states: ['11', '10']
Transition function:
	1	10	11
1 	11	1	11
0 	11	10	11
Current state: 10
Currently accepting: True

Precision: 0.4909 Recall: 1.0000 Accuracy: 0.4914 F1: 0.6585


--------------------------------------------------------------------
Begin DFA extraction with n_state:12
Done fitting takes time: 2.2580
==Minimized===

This DFA has 8 states
States: ['2', '3', '5', '9', '12', '7', '11', '10']
Alphabet: set(['1', '0'])
Starting state: 10
Accepting states: ['11', '10', '3', '2', '9']
Transition function:
	10	11	12	2	3	5	7	9
1 	12	7	9	3	7	3	11	5
0 	12	7	10	11	2	3	11	5
Current state: 10
Currently accepting: True

Precision: 0.5034 Recall: 1.0000 Accuracy: 0.5162 F1: 0.6697


--------------------------------------------------------------------
Begin DFA extraction with n_state:13
Done fitting takes time: 1.8921
==Minimized===

This DFA has 8 states
States: ['11', '6', '5', '9', '13', '12', '10', '3']
Alphabet: set(['1', '0'])
Starting state: 10
Accepting states: ['11', '10', '3', '6', '9']
Transition function:
	10	11	12	13	3	5	6	9
1 	12	3	9	3	13	6	13	5
0 	12	3	10	3	13	3	11	5
Current state: 10
Currently accepting: True

Precision: 0.5036 Recall: 1.0000 Accuracy: 0.5167 F1: 0.6699


--------------------------------------------------------------------
Begin DFA extraction with n_state:14
Done fitting takes time: 1.8540
==Minimized===

This DFA has 3 states
States: ['12', '11', '10']
Alphabet: set(['1', '0'])
Starting state: 10
Accepting states: ['11', '10']
Transition function:
	10	11	12
1 	12	11	11
0 	12	11	10
Current state: 10
Currently accepting: True

Precision: 0.4914 Recall: 1.0000 Accuracy: 0.4926 F1: 0.6590


--------------------------------------------------------------------
Begin DFA extraction with n_state:15
Done fitting takes time: 2.4717
==Minimized===

This DFA has 1 states
States: ['11']
Alphabet: set(['1', '0'])
Starting state: 11
Accepting states: ['11']
Transition function:
	11
1 	11
0 	11
Current state: 11
Currently accepting: True

Precision: 0.4903 Recall: 1.0000 Accuracy: 0.4903 F1: 0.6580


--------------------------------------------------------------------
Begin DFA extraction with n_state:16
Done fitting takes time: 2.2714
==Minimized===

This DFA has 3 states
States: ['15', '11', '16']
Alphabet: set(['1', '0'])
Starting state: 16
Accepting states: ['11', '16']
Transition function:
	11	15	16
1 	11	11	15
0 	11	11	15
Current state: 16
Currently accepting: True

Precision: 0.4905 Recall: 1.0000 Accuracy: 0.4906 F1: 0.6581


--------------------------------------------------------------------
Begin DFA extraction with n_state:17
Done fitting takes time: 2.0502
==Minimized===

This DFA has 12 states
States: ['10', '11', '3', '6', '16', '13', '15', '12', '5', '1', '17', '9']
Alphabet: set(['1', '0'])
Starting state: 16
Accepting states: ['11', '10', '12', '17', '1', '3', '5', '6', '9']
Transition function:
	1	10	11	12	13	15	16	17	3	5	6	9
1 	1	13	3	6	1	9	15	12	11	6	11	12
0 	13	13	10	17	10	17	15	11	13	6	11	5
Current state: 16
Currently accepting: False

Precision: 0.4870 Recall: 0.7131 Accuracy: 0.4909 F1: 0.5787


--------------------------------------------------------------------
Begin DFA extraction with n_state:18
Done fitting takes time: 2.2716
==Minimized===

This DFA has 3 states
States: ['11', '15', '16']
Alphabet: set(['1', '0'])
Starting state: 16
Accepting states: ['11']
Transition function:
	11	15	16
1 	11	11	15
0 	11	11	15
Current state: 16
Currently accepting: False

Precision: 0.4905 Recall: 1.0000 Accuracy: 0.4906 F1: 0.6581


--------------------------------------------------------------------
Begin DFA extraction with n_state:19
Done fitting takes time: 2.4744
==Minimized===

This DFA has 3 states
States: ['15', '11', '16']
Alphabet: set(['1', '0'])
Starting state: 16
Accepting states: ['11', '16']
Transition function:
	11	15	16
1 	11	11	15
0 	11	11	15
Current state: 16
Currently accepting: True

Precision: 0.4905 Recall: 1.0000 Accuracy: 0.4906 F1: 0.6581
[ 0.          0.45502239  0.          0.4957265   0.67020677  0.67020677
  0.66993727  0.65786144  0.60359168  0.65849802  0.66966798  0.66988339
  0.65901899  0.65802986  0.65813384  0.57872175  0.65813384  0.65813384]


[[ 0.          0.          0.67020677  0.67020677  0.          0.67020677
   0.40640499  0.          0.          0.45319802  0.511079    0.511079
   0.09035356  0.38574974  0.4656234   0.32776983  0.53321304  0.50472367]
 [ 0.          0.          0.          0.          0.          0.12747344
   0.          0.          0.          0.          0.          0.          0.
   0.66093143  0.61933949  0.58605118  0.51703686  0.29734752]
 [ 0.986733    0.50826596  0.50826596  1.          1.          1.          1.
   1.          1.          1.          1.          1.          1.          1.
   1.          1.          1.          1.        ]
 [ 0.986733    0.79005288  1.          1.          1.          1.          1.
   1.          1.          1.          1.          1.          1.          1.
   1.          1.          1.          1.        ]
 [ 0.40714796  0.          0.67020677  0.          0.67020677  0.66688015
   0.66688015  0.66565447  0.66565447  0.65730654  0.66565447  0.66565447
   0.70557344  0.69406393  0.70020499  0.70011206  0.70477343  0.69422819]
 [ 0.          0.78620492  1.          1.          1.          1.          1.
   1.          1.          1.          1.          1.          1.          1.
   1.          1.          1.          1.        ]
 [ 0.          0.45502239  0.          0.4957265   0.67020677  0.67020677
   0.66993727  0.65786144  0.60359168  0.65849802  0.66966798  0.66988339
   0.65901899  0.65802986  0.65813384  0.57872175  0.65813384  0.65813384]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]]
