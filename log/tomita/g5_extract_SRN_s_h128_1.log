G:g5, model:SRN sigmoid, load all data and stored hidden activations


--------------------------------------------------------------------
Begin DFA extraction with n_state:2
Done fitting takes time: 0.6052
==Minimized===

This DFA has 1 states
States: ['1']
Alphabet: set(['1', '0'])
Starting state: 1
Accepting states: []
Transition function:
	1
1 	1
0 	1
Current state: 1
Currently accepting: False

Precision: 0.0000 Recall: 0.0000 Accuracy: 0.5097 F1: 0.0000


--------------------------------------------------------------------
Begin DFA extraction with n_state:3
Done fitting takes time: 0.6763
==Minimized===

This DFA has 1 states
States: ['1']
Alphabet: set(['1', '0'])
Starting state: 1
Accepting states: []
Transition function:
	1
1 	1
0 	1
Current state: 1
Currently accepting: False

Precision: 0.0000 Recall: 0.0000 Accuracy: 0.5097 F1: 0.0000


--------------------------------------------------------------------
Begin DFA extraction with n_state:4
Done fitting takes time: 1.1617
==Minimized===

This DFA has 2 states
States: ['4', '1']
Alphabet: set(['1', '0'])
Starting state: 4
Accepting states: ['4']
Transition function:
	1	4
1 	1	1
0 	1	1
Current state: 4
Currently accepting: True

Precision: 0.0000 Recall: 0.0000 Accuracy: 0.5097 F1: 0.0000


--------------------------------------------------------------------
Begin DFA extraction with n_state:5
Done fitting takes time: 0.8995
==Minimized===

This DFA has 2 states
States: ['1', '3']
Alphabet: set(['1', '0'])
Starting state: 1
Accepting states: ['1']
Transition function:
	1	3
1 	3	1
0 	3	1
Current state: 1
Currently accepting: True

Precision: 0.5040 Recall: 1.0000 Accuracy: 0.5174 F1: 0.6702


--------------------------------------------------------------------
Begin DFA extraction with n_state:6
Done fitting takes time: 0.9125
==Minimized===

This DFA has 2 states
States: ['4', '1']
Alphabet: set(['1', '0'])
Starting state: 4
Accepting states: ['4']
Transition function:
	1	4
1 	1	1
0 	1	1
Current state: 4
Currently accepting: True

Precision: 0.0000 Recall: 0.0000 Accuracy: 0.5097 F1: 0.0000


--------------------------------------------------------------------
Begin DFA extraction with n_state:7
Done fitting takes time: 1.6249
==Minimized===

This DFA has 2 states
States: ['1', '3']
Alphabet: set(['1', '0'])
Starting state: 1
Accepting states: ['1']
Transition function:
	1	3
1 	3	1
0 	3	1
Current state: 1
Currently accepting: True

Precision: 0.5040 Recall: 1.0000 Accuracy: 0.5174 F1: 0.6702


--------------------------------------------------------------------
Begin DFA extraction with n_state:8
Done fitting takes time: 1.1046
==Minimized===

This DFA has 2 states
States: ['4', '1']
Alphabet: set(['1', '0'])
Starting state: 4
Accepting states: ['4']
Transition function:
	1	4
1 	1	1
0 	1	1
Current state: 4
Currently accepting: True

Precision: 0.0000 Recall: 0.0000 Accuracy: 0.5097 F1: 0.0000


--------------------------------------------------------------------
Begin DFA extraction with n_state:9
Done fitting takes time: 1.5792
==Minimized===

This DFA has 6 states
States: ['2', '9', '3', '8', '1', '4']
Alphabet: set(['1', '0'])
Starting state: 4
Accepting states: ['1', '9', '4']
Transition function:
	1	2	3	4	8	9
1 	8	2	1	3	1	8
0 	8	2	4	3	9	2
Current state: 4
Currently accepting: True

Precision: 0.4998 Recall: 0.2900 Accuracy: 0.5095 F1: 0.3671


--------------------------------------------------------------------
Begin DFA extraction with n_state:10
Done fitting takes time: 0.6794
==Minimized===

This DFA has 8 states
States: ['3', '5', '10', '7', '8', '1', '2', '9']
Alphabet: set(['1', '0'])
Starting state: 1
Accepting states: ['1', '3', '2', '5', '9']
Transition function:
	1	10	2	3	5	7	8	9
1 	10	1	7	1	3	3	7	8
0 	10	9	7	5	2	2	7	8
Current state: 1
Currently accepting: True

Precision: 0.4823 Recall: 0.5594 Accuracy: 0.4895 F1: 0.5180


--------------------------------------------------------------------
Begin DFA extraction with n_state:11
Done fitting takes time: 0.6609
==Minimized===

This DFA has 7 states
States: ['7', '10', '9', '11', '1', '3', '8']
Alphabet: set(['1', '0'])
Starting state: 11
Accepting states: ['11', '1', '9']
Transition function:
	1	10	11	3	7	8	9
1 	10	11	10	11	3	1	8
0 	8	9	10	7	3	7	8
Current state: 11
Currently accepting: True

Precision: 0.4978 Recall: 0.7068 Accuracy: 0.5066 F1: 0.5842


--------------------------------------------------------------------
Begin DFA extraction with n_state:12
Done fitting takes time: 0.6723
==Minimized===

This DFA has 8 states
States: ['10', '4', '11', '3', '12', '7', '2', '9']
Alphabet: set(['1', '0'])
Starting state: 4
Accepting states: ['11', '2', '9']
Transition function:
	10	11	12	2	3	4	7	9
1 	11	10	7	7	4	10	3	12
0 	9	10	7	7	4	10	2	12
Current state: 4
Currently accepting: False

Precision: 0.4905 Recall: 0.3986 Accuracy: 0.5021 F1: 0.4398


--------------------------------------------------------------------
Begin DFA extraction with n_state:13
Done fitting takes time: 1.4617
==Minimized===

This DFA has 8 states
States: ['12', '7', '9', '10', '11', '13', '3', '5']
Alphabet: set(['1', '0'])
Starting state: 11
Accepting states: ['11', '13', '9']
Transition function:
	10	11	12	13	3	5	7	9
1 	11	10	7	5	13	13	3	12
0 	9	10	7	5	7	12	3	12
Current state: 11
Currently accepting: True

Precision: 0.4936 Recall: 0.2591 Accuracy: 0.5064 F1: 0.3398


--------------------------------------------------------------------
Begin DFA extraction with n_state:14
Done fitting takes time: 1.5564
==Minimized===

This DFA has 8 states
States: ['13', '4', '3', '7', '10', '12', '11', '9']
Alphabet: set(['1', '0'])
Starting state: 11
Accepting states: ['11', '4', '7', '9']
Transition function:
	10	11	12	13	3	4	7	9
1 	11	10	11	13	4	13	3	12
0 	9	10	7	13	7	13	3	12
Current state: 11
Currently accepting: True

Precision: 0.5108 Recall: 0.4415 Accuracy: 0.5188 F1: 0.4737


--------------------------------------------------------------------
Begin DFA extraction with n_state:15
Done fitting takes time: 0.6682
==Minimized===

This DFA has 13 states
States: ['7', '6', '15', '9', '5', '13', '8', '10', '3', '14', '1', '12', '2']
Alphabet: set(['1', '0'])
Starting state: 14
Accepting states: ['15', '14', '1', '9']
Transition function:
	1	10	12	13	14	15	2	3	5	6	7	8	9
1 	10	1	7	5	10	8	6	15	2	3	3	13	12
0 	8	9	7	5	10	8	6	15	2	2	3	13	12
Current state: 14
Currently accepting: True

Precision: 0.5022 Recall: 0.1078 Accuracy: 0.5101 F1: 0.1775


--------------------------------------------------------------------
Begin DFA extraction with n_state:16
Done fitting takes time: 1.7629
==Minimized===

This DFA has 6 states
States: ['2', '3', '10', '12', '11', '9']
Alphabet: set(['1', '0'])
Starting state: 11
Accepting states: ['11', '2', '9']
Transition function:
	10	11	12	2	3	9
1 	11	10	11	3	3	12
0 	9	10	2	2	3	12
Current state: 11
Currently accepting: True

Precision: 0.5092 Recall: 0.3121 Accuracy: 0.5152 F1: 0.3870


--------------------------------------------------------------------
Begin DFA extraction with n_state:17
Done fitting takes time: 0.6571
==Minimized===

This DFA has 9 states
States: ['7', '13', '12', '15', '9', '10', '3', '11', '4']
Alphabet: set(['1', '0'])
Starting state: 11
Accepting states: ['11', '15', '4', '9']
Transition function:
	10	11	12	13	15	3	4	7	9
1 	11	10	7	13	13	15	3	3	12
0 	9	10	7	13	13	4	3	3	12
Current state: 11
Currently accepting: True

Precision: 0.5124 Recall: 0.1642 Accuracy: 0.5135 F1: 0.2487


--------------------------------------------------------------------
Begin DFA extraction with n_state:18
Done fitting takes time: 0.6646
==Minimized===

This DFA has 10 states
States: ['7', '8', '11', '16', '4', '9', '10', '3', '12', '1']
Alphabet: set(['1', '0'])
Starting state: 11
Accepting states: ['11', '12', '16', '1', '4', '9']
Transition function:
	1	10	11	12	16	3	4	7	8	9
1 	8	11	10	7	10	16	3	3	1	8
0 	8	9	10	7	8	4	12	3	7	12
Current state: 11
Currently accepting: True

Precision: 0.5019 Recall: 0.7145 Accuracy: 0.5122 F1: 0.5896


--------------------------------------------------------------------
Begin DFA extraction with n_state:19
Done fitting takes time: 1.7875
==Minimized===

This DFA has 12 states
States: ['7', '2', '5', '4', '3', '16', '10', '12', '11', '9', '19', '18']
Alphabet: set(['1', '0'])
Starting state: 11
Accepting states: ['11', '16', '5', '4', '9']
Transition function:
	10	11	12	16	18	19	2	3	4	5	7	9
1 	11	10	11	3	19	18	7	4	18	2	3	12
0 	9	10	5	3	19	5	7	16	18	2	3	12
Current state: 11
Currently accepting: True

Precision: 0.5046 Recall: 0.4891 Accuracy: 0.5140 F1: 0.4967
[ 0.          0.          0.          0.67020677  0.          0.67020677
  0.          0.36706168  0.518008    0.58418494  0.43979335  0.33978901
  0.47366388  0.17750544  0.38701995  0.24872727  0.58959881  0.49670812]


[[ 0.          0.          0.          0.67020677  0.          0.67020677
   0.          0.36706168  0.518008    0.58418494  0.43979335  0.33978901
   0.47366388  0.17750544  0.38701995  0.24872727  0.58959881  0.49670812]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]]
