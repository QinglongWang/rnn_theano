G:g3, model:SRN sigmoid, load all data and stored hidden activations


--------------------------------------------------------------------
Begin DFA extraction with n_state:2
Done fitting takes time: 0.4792
==Minimized===

This DFA has 1 states
States: ['2']
Alphabet: set(['1', '0'])
Starting state: 2
Accepting states: []
Transition function:
	2
1 	2
0 	2
Current state: 2
Currently accepting: False

Precision: 0.0000 Recall: 0.0000 Accuracy: 0.5422 F1: 0.0000


--------------------------------------------------------------------
Begin DFA extraction with n_state:3
Done fitting takes time: 0.1931
==Minimized===

This DFA has 1 states
States: ['3']
Alphabet: set(['1', '0'])
Starting state: 3
Accepting states: ['3']
Transition function:
	3
1 	3
0 	3
Current state: 3
Currently accepting: True

Precision: 0.4578 Recall: 1.0000 Accuracy: 0.4578 F1: 0.6280


--------------------------------------------------------------------
Begin DFA extraction with n_state:4
Done fitting takes time: 0.6716
==Minimized===

This DFA has 1 states
States: ['3']
Alphabet: set(['1', '0'])
Starting state: 3
Accepting states: ['3']
Transition function:
	3
1 	3
0 	3
Current state: 3
Currently accepting: True

Precision: 0.4578 Recall: 1.0000 Accuracy: 0.4578 F1: 0.6280


--------------------------------------------------------------------
Begin DFA extraction with n_state:5
Done fitting takes time: 0.5759
==Minimized===

This DFA has 1 states
States: ['3']
Alphabet: set(['1', '0'])
Starting state: 3
Accepting states: ['3']
Transition function:
	3
1 	3
0 	3
Current state: 3
Currently accepting: True

Precision: 0.4578 Recall: 1.0000 Accuracy: 0.4578 F1: 0.6280


--------------------------------------------------------------------
Begin DFA extraction with n_state:6
Done fitting takes time: 0.3944
==Minimized===

This DFA has 3 states
States: ['4', '3', '5']
Alphabet: set(['1', '0'])
Starting state: 5
Accepting states: ['3', '5']
Transition function:
	3	4	5
1 	4	3	4
0 	3	3	4
Current state: 5
Currently accepting: True

Precision: 0.4378 Recall: 0.6172 Accuracy: 0.4619 F1: 0.5122


--------------------------------------------------------------------
Begin DFA extraction with n_state:7
Done fitting takes time: 0.3675
==Minimized===

This DFA has 3 states
States: ['4', '3', '5']
Alphabet: set(['1', '0'])
Starting state: 5
Accepting states: ['3', '5']
Transition function:
	3	4	5
1 	4	3	4
0 	3	3	4
Current state: 5
Currently accepting: True

Precision: 0.4378 Recall: 0.6172 Accuracy: 0.4619 F1: 0.5122


--------------------------------------------------------------------
Begin DFA extraction with n_state:8
Done fitting takes time: 0.2296
==Minimized===

This DFA has 3 states
States: ['4', '8', '5']
Alphabet: set(['1', '0'])
Starting state: 5
Accepting states: ['8', '5']
Transition function:
	4	5	8
1 	8	4	8
0 	8	4	8
Current state: 5
Currently accepting: True

Precision: 0.4575 Recall: 0.9990 Accuracy: 0.4573 F1: 0.6276


--------------------------------------------------------------------
Begin DFA extraction with n_state:9
Done fitting takes time: 0.6559
==Minimized===

This DFA has 8 states
States: ['7', '4', '8', '1', '2', '5', '3', '6']
Alphabet: set(['1', '0'])
Starting state: 5
Accepting states: ['2', '5', '4', '7', '8']
Transition function:
	1	2	3	4	5	6	7	8
1 	6	8	1	4	4	1	6	2
0 	6	2	5	3	2	7	6	3
Current state: 5
Currently accepting: True

Precision: 0.7063 Recall: 0.8901 Accuracy: 0.7802 F1: 0.7876


--------------------------------------------------------------------
Begin DFA extraction with n_state:10
Done fitting takes time: 0.2230
==Minimized===

This DFA has 8 states
States: ['7', '4', '8', '10', '2', '5', '1', '3']
Alphabet: set(['1', '0'])
Starting state: 5
Accepting states: ['2', '5', '4', '7', '8']
Transition function:
	1	10	2	3	4	5	7	8
1 	10	1	8	1	4	4	10	2
0 	10	7	2	5	3	2	10	3
Current state: 5
Currently accepting: True

Precision: 0.7063 Recall: 0.8901 Accuracy: 0.7802 F1: 0.7876


--------------------------------------------------------------------
Begin DFA extraction with n_state:11
Done fitting takes time: 0.6266
==Minimized===

This DFA has 6 states
States: ['4', '8', '10', '3', '2', '5']
Alphabet: set(['1', '0'])
Starting state: 5
Accepting states: ['2', '5', '4', '8']
Transition function:
	10	2	3	4	5	8
1 	10	8	10	4	4	2
0 	10	2	5	3	2	3
Current state: 5
Currently accepting: True

Precision: 0.8543 Recall: 0.8573 Accuracy: 0.8677 F1: 0.8558


--------------------------------------------------------------------
Begin DFA extraction with n_state:12
Done fitting takes time: 0.6202
==Minimized===

This DFA has 6 states
States: ['4', '8', '10', '3', '12', '5']
Alphabet: set(['1', '0'])
Starting state: 5
Accepting states: ['12', '5', '4', '8']
Transition function:
	10	12	3	4	5	8
1 	10	8	10	4	4	12
0 	10	12	5	3	12	3
Current state: 5
Currently accepting: True

Precision: 0.8543 Recall: 0.8573 Accuracy: 0.8677 F1: 0.8558


--------------------------------------------------------------------
Begin DFA extraction with n_state:13
Done fitting takes time: 0.2295
==Minimized===

This DFA has 7 states
States: ['7', '11', '4', '10', '1', '13', '6']
Alphabet: set(['1', '0'])
Starting state: 11
Accepting states: ['11', '4', '7']
Transition function:
	1	10	11	13	4	6	7
1 	10	1	4	1	11	1	10
0 	6	7	11	11	13	1	10
Current state: 11
Currently accepting: True

Precision: 0.7458 Recall: 1.0000 Accuracy: 0.8440 F1: 0.8544


--------------------------------------------------------------------
Begin DFA extraction with n_state:14
Done fitting takes time: 0.6220
==Minimized===

This DFA has 9 states
States: ['7', '12', '5', '8', '14', '10', '1', '13', '6']
Alphabet: set(['1', '0'])
Starting state: 14
Accepting states: ['12', '5', '7', '8']
Transition function:
	1	10	12	13	14	5	6	7	8
1 	10	1	8	1	5	5	1	10	12
0 	6	7	12	5	12	13	1	10	13
Current state: 14
Currently accepting: False

Precision: 0.8217 Recall: 0.7927 Accuracy: 0.8264 F1: 0.8070


--------------------------------------------------------------------
Begin DFA extraction with n_state:15
Done fitting takes time: 0.2459
==Minimized===

This DFA has 8 states
States: ['7', '11', '15', '4', '14', '10', '13', '1']
Alphabet: set(['1', '0'])
Starting state: 14
Accepting states: ['11', '15', '4', '7']
Transition function:
	1	10	11	13	14	15	4	7
1 	10	1	4	1	4	15	11	10
0 	10	7	11	15	11	13	13	10
Current state: 14
Currently accepting: False

Precision: 0.7996 Recall: 1.0000 Accuracy: 0.8853 F1: 0.8886


--------------------------------------------------------------------
Begin DFA extraction with n_state:16
Done fitting takes time: 0.2275
==Minimized===

This DFA has 8 states
States: ['11', '15', '4', '13', '10', '3', '14', '5']
Alphabet: set(['1', '0'])
Starting state: 14
Accepting states: ['11', '15', '4']
Transition function:
	10	11	13	14	15	3	4	5
1 	10	4	5	4	15	10	11	15
0 	10	11	5	11	3	5	13	3
Current state: 14
Currently accepting: False

Precision: 0.9026 Recall: 0.7756 Accuracy: 0.8590 F1: 0.8343


--------------------------------------------------------------------
Begin DFA extraction with n_state:17
Done fitting takes time: 0.6442
==Minimized===

This DFA has 6 states
States: ['11', '15', '4', '14', '10', '13']
Alphabet: set(['1', '0'])
Starting state: 14
Accepting states: ['11', '15', '4']
Transition function:
	10	11	13	14	15	4
1 	10	4	10	4	15	11
0 	10	11	15	11	13	13
Current state: 14
Currently accepting: False

Precision: 1.0000 Recall: 1.0000 Accuracy: 1.0000 F1: 1.0000


--------------------------------------------------------------------
Begin DFA extraction with n_state:18
Done fitting takes time: 0.8615
==Minimized===

This DFA has 11 states
States: ['17', '11', '15', '4', '14', '7', '10', '1', '6', '13', '16']
Alphabet: set(['1', '0'])
Starting state: 14
Accepting states: ['11', '15', '17', '4']
Transition function:
	1	10	11	13	14	15	16	17	4	6	7
1 	10	7	4	1	4	15	7	16	11	1	16
0 	6	7	11	15	11	13	17	16	13	7	10
Current state: 14
Currently accepting: False

Precision: 0.8888 Recall: 1.0000 Accuracy: 0.9428 F1: 0.9411


--------------------------------------------------------------------
Begin DFA extraction with n_state:19
Done fitting takes time: 1.0141
==Minimized===

This DFA has 12 states
States: ['17', '11', '15', '4', '7', '10', '19', '1', '14', '18', '13', '6']
Alphabet: set(['1', '0'])
Starting state: 14
Accepting states: ['11', '15', '17', '4']
Transition function:
	1	10	11	13	14	15	17	18	19	4	6	7
1 	10	19	4	1	4	15	18	17	10	11	19	18
0 	6	7	11	15	11	13	10	7	10	13	19	10
Current state: 14
Currently accepting: False

Precision: 0.9456 Recall: 1.0000 Accuracy: 0.9737 F1: 0.9721
[ 0.          0.6280285   0.6280285   0.6280285   0.51224105  0.51224105
  0.62759385  0.78759482  0.78759482  0.85577649  0.85577649  0.85437312
  0.80698152  0.88863993  0.83428261  1.          0.94114855  0.97205882]


[[ 0.          0.6280285   0.6280285   0.6280285   0.51224105  0.51224105
   0.62759385  0.78759482  0.78759482  0.85577649  0.85577649  0.85437312
   0.80698152  0.88863993  0.83428261  1.          0.94114855  0.97205882]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]]
