G:g7, model:SRN tanh, load all data and stored hidden activations


--------------------------------------------------------------------
Begin DFA extraction with n_state:2
Done fitting takes time: 0.2305
==Minimized===

This DFA has 1 states
States: ['1']
Alphabet: set(['1', '0'])
Starting state: 1
Accepting states: []
Transition function:
	1
1 	1
0 	1
Current state: 1
Currently accepting: False

Precision: 0.0000 Recall: 0.0000 Accuracy: 0.5731 F1: 0.0000


--------------------------------------------------------------------
Begin DFA extraction with n_state:3
Done fitting takes time: 0.1526
==Minimized===

This DFA has 1 states
States: ['1']
Alphabet: set(['1', '0'])
Starting state: 1
Accepting states: []
Transition function:
	1
1 	1
0 	1
Current state: 1
Currently accepting: False

Precision: 0.0000 Recall: 0.0000 Accuracy: 0.5731 F1: 0.0000


--------------------------------------------------------------------
Begin DFA extraction with n_state:4
Done fitting takes time: 0.2655
==Minimized===

This DFA has 1 states
States: ['1']
Alphabet: set(['1', '0'])
Starting state: 1
Accepting states: []
Transition function:
	1
1 	1
0 	1
Current state: 1
Currently accepting: False

Precision: 0.0000 Recall: 0.0000 Accuracy: 0.5731 F1: 0.0000


--------------------------------------------------------------------
Begin DFA extraction with n_state:5
Done fitting takes time: 0.0891
==Minimized===

This DFA has 2 states
States: ['1', '5']
Alphabet: set(['1', '0'])
Starting state: 1
Accepting states: ['1']
Transition function:
	1	5
1 	5	5
0 	1	5
Current state: 1
Currently accepting: True

Precision: 1.0000 Recall: 0.0141 Accuracy: 0.5792 F1: 0.0278


--------------------------------------------------------------------
Begin DFA extraction with n_state:6
Done fitting takes time: 0.0942
==Minimized===

This DFA has 2 states
States: ['1', '2']
Alphabet: set(['1', '0'])
Starting state: 1
Accepting states: ['1']
Transition function:
	1	2
1 	2	2
0 	1	2
Current state: 1
Currently accepting: True

Precision: 1.0000 Recall: 0.0141 Accuracy: 0.5792 F1: 0.0278


--------------------------------------------------------------------
Begin DFA extraction with n_state:7
Done fitting takes time: 0.1029
==Minimized===

This DFA has 5 states
States: ['1', '3', '5', '4', '7']
Alphabet: set(['1', '0'])
Starting state: 1
Accepting states: ['1', '3']
Transition function:
	1	3	4	5	7
1 	5	4	5	3	7
0 	1	4	5	7	7
Current state: 1
Currently accepting: True

Precision: 0.8091 Recall: 0.1045 Accuracy: 0.6072 F1: 0.1850


--------------------------------------------------------------------
Begin DFA extraction with n_state:8
Done fitting takes time: 0.1955
==Minimized===

This DFA has 5 states
States: ['1', '8', '7', '3', '4']
Alphabet: set(['1', '0'])
Starting state: 8
Accepting states: ['1']
Transition function:
	1	3	4	7	8
1 	3	4	7	8	1
0 	3	4	7	8	1
Current state: 8
Currently accepting: False

Precision: 0.4475 Recall: 0.1901 Accuracy: 0.5541 F1: 0.2669


--------------------------------------------------------------------
Begin DFA extraction with n_state:9
Done fitting takes time: 0.2077
==Minimized===

This DFA has 5 states
States: ['3', '1', '7', '4', '8']
Alphabet: set(['1', '0'])
Starting state: 8
Accepting states: ['1', '7']
Transition function:
	1	3	4	7	8
1 	3	4	1	8	1
0 	3	4	7	8	1
Current state: 8
Currently accepting: False

Precision: 0.4067 Recall: 0.3556 Accuracy: 0.5035 F1: 0.3795


--------------------------------------------------------------------
Begin DFA extraction with n_state:10
Done fitting takes time: 0.1964
==Minimized===

This DFA has 7 states
States: ['8', '2', '5', '4', '3', '1', '7']
Alphabet: set(['1', '0'])
Starting state: 8
Accepting states: ['8', '2']
Transition function:
	1	2	3	4	5	7	8
1 	3	2	4	5	2	7	1
0 	3	7	4	5	8	7	1
Current state: 8
Currently accepting: True

Precision: 0.6390 Recall: 0.3157 Accuracy: 0.6318 F1: 0.4226


--------------------------------------------------------------------
Begin DFA extraction with n_state:11
Done fitting takes time: 0.2081
==Minimized===

This DFA has 7 states
States: ['5', '8', '2', '7', '11', '10', '3']
Alphabet: set(['1', '0'])
Starting state: 8
Accepting states: ['8', '2', '5']
Transition function:
	10	11	2	3	5	7	8
1 	10	7	2	11	3	2	5
0 	10	7	10	11	3	8	8
Current state: 8
Currently accepting: True

Precision: 0.6677 Recall: 0.5117 Accuracy: 0.6829 F1: 0.5794


--------------------------------------------------------------------
Begin DFA extraction with n_state:12
Done fitting takes time: 0.0951
==Minimized===

This DFA has 10 states
States: ['12', '11', '3', '9', '10', '1', '2', '8', '7', '6']
Alphabet: set(['1', '0'])
Starting state: 8
Accepting states: ['11', '10', '12', '1', '2', '8']
Transition function:
	1	10	11	12	2	3	6	7	8	9
1 	3	9	7	9	2	11	6	2	1	10
0 	3	9	7	8	12	11	6	8	1	6
Current state: 8
Currently accepting: True

Precision: 0.5004 Recall: 0.6901 Accuracy: 0.5736 F1: 0.5802


--------------------------------------------------------------------
Begin DFA extraction with n_state:13
Done fitting takes time: 0.0981
==Minimized===

This DFA has 6 states
States: ['8', '12', '11', '3', '1', '2']
Alphabet: set(['1', '0'])
Starting state: 8
Accepting states: ['1', '2', '8']
Transition function:
	1	11	12	2	3	8
1 	3	12	2	12	11	1
0 	3	12	8	12	11	1
Current state: 8
Currently accepting: True

Precision: 0.4224 Recall: 0.4214 Accuracy: 0.5070 F1: 0.4219


--------------------------------------------------------------------
Begin DFA extraction with n_state:14
Done fitting takes time: 0.3399
==Minimized===

This DFA has 5 states
States: ['14', '11', '1', '3', '8']
Alphabet: set(['1', '0'])
Starting state: 8
Accepting states: ['11', '1']
Transition function:
	1	11	14	3	8
1 	3	14	8	11	1
0 	3	14	8	11	1
Current state: 8
Currently accepting: False

Precision: 0.4238 Recall: 0.3592 Accuracy: 0.5180 F1: 0.3888


--------------------------------------------------------------------
Begin DFA extraction with n_state:15
Done fitting takes time: 0.4500
==Minimized===

This DFA has 13 states
States: ['13', '14', '11', '3', '12', '1', '9', '10', '7', '15', '2', '4', '8']
Alphabet: set(['1', '0'])
Starting state: 8
Accepting states: ['13', '12', '15', '1', '2', '9']
Transition function:
	1	10	11	12	13	14	15	2	3	4	7	8	9
1 	3	7	14	2	10	4	2	2	11	15	7	1	10
0 	3	9	14	7	9	4	4	13	11	12	7	1	10
Current state: 8
Currently accepting: False

Precision: 0.4741 Recall: 0.3979 Accuracy: 0.5546 F1: 0.4327


--------------------------------------------------------------------
Begin DFA extraction with n_state:16
Done fitting takes time: 0.1016
==Minimized===

This DFA has 12 states
States: ['16', '14', '10', '2', '9', '11', '3', '8', '13', '12', '15', '1']
Alphabet: set(['1', '0'])
Starting state: 16
Accepting states: ['11', '13', '12', '15', '16', '1']
Transition function:
	1	10	11	12	13	14	15	16	2	3	8	9
1 	3	2	14	2	10	8	9	1	2	11	15	10
0 	3	13	14	8	10	8	9	1	2	11	12	2
Current state: 16
Currently accepting: True

Precision: 0.5721 Recall: 0.1538 Accuracy: 0.5897 F1: 0.2424


--------------------------------------------------------------------
Begin DFA extraction with n_state:17
Done fitting takes time: 0.1088
==Minimized===

This DFA has 12 states
States: ['16', '12', '2', '14', '10', '6', '11', '3', '8', '1', '7', '9']
Alphabet: set(['1', '0'])
Starting state: 16
Accepting states: ['11', '12', '16', '1', '2', '7', '9']
Transition function:
	1	10	11	12	14	16	2	3	6	7	8	9
1 	3	10	14	2	8	1	2	11	10	8	12	6
0 	3	10	14	9	8	1	10	11	9	8	7	6
Current state: 16
Currently accepting: True

Precision: 0.6211 Recall: 0.5387 Accuracy: 0.6628 F1: 0.5770


--------------------------------------------------------------------
Begin DFA extraction with n_state:18
Done fitting takes time: 0.3359
==Minimized===

This DFA has 13 states
States: ['12', '16', '8', '14', '11', '18', '1', '13', '10', '15', '6', '17', '9']
Alphabet: set(['1', '0'])
Starting state: 16
Accepting states: ['10', '12', '15', '1']
Transition function:
	1	10	11	12	13	14	15	16	17	18	6	8	9
1 	18	6	14	8	17	8	9	1	17	11	17	15	6
0 	18	13	14	8	10	8	9	1	17	11	13	12	6
Current state: 16
Currently accepting: False

Precision: 0.5095 Recall: 0.2207 Accuracy: 0.5767 F1: 0.3079


--------------------------------------------------------------------
Begin DFA extraction with n_state:19
Done fitting takes time: 0.2190
==Minimized===

This DFA has 12 states
States: ['1', '15', '2', '11', '12', '3', '19', '14', '5', '7', '16', '8']
Alphabet: set(['1', '0'])
Starting state: 16
Accepting states: ['15', '19', '1', '2', '5', '7']
Transition function:
	1	11	12	14	15	16	19	2	3	5	7	8
1 	19	14	12	2	2	5	11	2	11	3	8	15
0 	19	14	12	8	8	1	11	12	11	3	8	7
Current state: 16
Currently accepting: False

Precision: 0.6582 Recall: 0.4566 Accuracy: 0.6668 F1: 0.5392
[ 0.          0.          0.          0.02777778  0.02777778  0.18503119
  0.26688633  0.37946149  0.42262372  0.57940199  0.58016774  0.42185664
  0.3888183   0.4326739   0.24236818  0.5769956   0.30794431  0.53915454]


[[ 0.          0.          0.17754011  0.17754011  0.17754011  0.17754011
   0.17754011  0.59831461  0.12338308  0.59831461  0.59831461  1.          1.
   1.          1.          1.          1.          1.        ]
 [ 0.          0.          0.          0.02777778  0.02777778  0.18503119
   0.26688633  0.37946149  0.42262372  0.57940199  0.58016774  0.42185664
   0.3888183   0.4326739   0.24236818  0.5769956   0.30794431  0.53915454]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]
 [ 0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.          0.          0.          0.
   0.          0.          0.          0.        ]]
